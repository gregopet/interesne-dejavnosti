import org.jooq.util.GenerationTool
import org.jooq.util.jaxb.ForcedType


buildscript {

	repositories {
		jcenter()
	}
	dependencies {
		classpath "org.postgresql:postgresql:$postgresDriverVersion"
		classpath "io.ratpack:ratpack-gradle:$ratpackVersion"

		// Fat JAR
		classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.3'

		// Jooq
		classpath "org.jooq:jooq-meta:$jooqVersion"
		classpath "org.jooq:jooq-codegen:$jooqVersion"

		// Kotlin
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

		// Flyway
		classpath "org.flywaydb:flyway-gradle-plugin:$flywayVersion"

		// SSH plugin
		classpath 'org.hidetake:gradle-ssh-plugin:2.10.1'

        // Node for webpack
        classpath 'com.moowork.gradle:gradle-node-plugin:1.3.1'

        // Typescript definitions
        classpath group: 'cz.habarta.typescript-generator', name: 'typescript-generator-gradle-plugin', version: '2.23.603'
    }
}

plugins {
	id 'nu.studer.rocker' version '0.4'
    id "com.moowork.node" version "1.3.1"
}

version "1.0"
group "si.francebevk"

apply plugin: "io.ratpack.ratpack-groovy"
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'kotlin'
apply plugin: "org.flywaydb.flyway"
apply plugin: 'org.hidetake.ssh'
apply plugin: 'cz.habarta.typescript-generator'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
	jcenter()
	mavenCentral()
}

sourceSets {
	main {
 		resources {
			srcDirs "src/main/resources", "src/migrations"
		}
	}
}

shadowJar {
	archiveName = "${baseName}-${version}-${classifier}.${extension}"
}

// flyway migrations
flyway {
	schemas = ['public']
	outOfOrder = false
	validateOnMigrate = true
	cleanDisabled = false
	baselineOnMigrate = true
	locations = ["filesystem://${projectDir}/src/migrations/flyway"]
	user = devDbUsername
	password = devDbPassword
	url = "jdbc:postgresql://${devDbHost}/${devDbName}"
}

rocker {
	main {
		templateDir = file("src/views")
		outputDir = file("$buildDir/generated/rocker")
		optimize = false // true removes reloading code
	}
}

node {
    version = '13.12.0'
    download = false
    npmWorkDir = file("$projectDir/src/webpack")
    nodeModulesDir = file("$projectDir/src/webpack")
}

// Kotlin cannot compile without the template sources!
tasks.compileKotlin.dependsOn compileRocker

generateTypeScript {
    jsonLibrary = 'jackson2'
    classPatterns = [
        'si.francebevk.dto.**'
    ]
    outputFile = 'src/webpack/src/serverTypes.d.ts'
    outputKind = 'global'
    namespace = 'Rest';
}

// Use externalized logging config
run.doFirst {
	systemProperty 'logback.configurationFile', "$projectDir/src/ratpack/logback.xml"
}

// deploy
remotes {
	prod {
		host = "ind.francebevk.si"
		user = "webapp"
		identity = file("${System.getProperty("user.home")}/.ssh/id_rsa")
		//see http://anahorny.blogspot.si/2013/05/solution-for-comjcraftjschjschexception.html if you get
		//a reject HostKey exception
	 }
	 
}

task webpack(type: NpmTask) {}

webpack.doFirst {
	// Do a prod NPM build whenever we're packaging the whole app together
	if (gradle.taskGraph.hasTask(":shadowJar")) {
		it.args = ['run', 'build']
	} else {
		it.args = ['run', 'build:dev']
	}
}

tasks.compileRocker.dependsOn(webpack)

task deployProd(dependsOn: ['shadowJar']) {
	group "Deploy"
	description "Builds & copies JAR files to prod server"

	doLast {
		ssh.run {
			session(remotes.prod) {
				put(from: buildDir, into: "/home/webapp", filter: { it.name.endsWith('jar') })
			}
		}
	}
}

dependencies {
	//postgres driver & GORM extensions
	compile "org.postgresql:postgresql:$postgresDriverVersion"
	compile group: 'com.zaxxer', name: 'HikariCP', version: '2.6.1'
	compile group: 'org.jooq', name: 'jooq', version: jooqVersion

	// Commons lang
	compile 'org.apache.commons:commons-lang3:3.7'
	compile 'org.apache.commons:commons-text:1.2'

	// Commons codec required for HTTP Basic authentication
	compile group: 'commons-codec', name: 'commons-codec', version: '1.9'


	// Kotlin
	compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
	compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.2'
	compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion
	compile("org.jetbrains.kotlinx:kotlinx-coroutines-core:0.20")

	// Ratpack sessions
	compile group: 'io.ratpack', name: 'ratpack-session', version: '1.5.0-rc-2' // note: the version is subject to change
	// Ratpack auth
	compile group: 'org.pac4j', name: 'ratpack-pac4j', version: ratpackPac4jVersion
	compile group: 'org.pac4j', name: 'pac4j-core', version: pac4jVersion
	compile group: 'org.pac4j', name: 'pac4j-http', version: pac4jVersion


	// logging
	runtime("ch.qos.logback:logback-core:$logbackVersion")
	runtime("ch.qos.logback:logback-classic:$logbackVersion")

	// templates
	compile group: 'com.fizzed', name: 'rocker-runtime', version: rockerTemplatesVersion
	compile group: 'com.fizzed', name: 'rocker-compiler', version: rockerTemplatesVersion

	// Commons email
	compile group: 'org.apache.commons', name: 'commons-email', version: '1.3.1'


	// Flyway database migrations
	compile "org.flywaydb:flyway-core:${flywayVersion}"
}

tasks.create(name:'jooqModel', description: 'Generates the jOOQ model from database', group: 'DB'/*, dependsOn: 'flywayMigrate'*/).doLast {
	description = "Generates the jOOQ model from the dev database"
	def excludes = [
			'.*schema_version' //flyway database versioning
	].join('|')

	def config =
			new org.jooq.util.jaxb.Configuration()
					.withJdbc(
					new org.jooq.util.jaxb.Jdbc()
							.withDriver('org.postgresql.Driver')
							.withUrl("jdbc:postgresql://${devDbHost}/${devDbName}")
							.withUser(devDbUsername)
							.withPassword(devDbPassword)
							.withSchema('public')
			)
					.withGenerator(new org.jooq.util.jaxb.Generator().withGenerate(new org.jooq.util.jaxb.Generate().withDeprecated(false))
			//.withStrategy(new org.jooq.util.DefaultGeneratorStrategy())
					.withTarget(new org.jooq.util.jaxb.Target().withPackageName('si.francebevk.db').withDirectory("${projectDir}/src/main/java"))
					.withDatabase(
					new org.jooq.util.jaxb.Database()
							.withName('org.jooq.util.postgres.PostgresDatabase')
							.withExcludes(excludes)
							.withInputSchema('public')
							.withIncludeExcludeColumns(true)
							.withIncludeIndexes(false)
							.withForcedTypes(
							/*ForcedType
								.newInstance()
								.withBinding("si.francebevk.db.ShortArrayBinding")
								.withUserType("Short[]")
								.withExpression($/.*player\.unlocked_mentors/$),*/
							/*ForcedType
									.newInstance()
									.withConverter("si.francebevk.db.InstantConverter")
									.withUserType("java.time.Instant")
									.withTypes("timestamp\\ with\\ time\\ zone"),
							ForcedType
									.newInstance()
									.withBinding("si.francebevk.db.JsonbStringBinding")
									.withUserType("java.lang.String")
									.withTypes("jsonb"),
									*/
					)
			)
			)
	GenerationTool.generate(config)
}


compileKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}
