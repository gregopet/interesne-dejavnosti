/*
 * This file is generated by jOOQ.
*/
package si.francebevk.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import si.francebevk.db.Keys;
import si.francebevk.db.Public;
import si.francebevk.db.tables.records.ActivityRecord;
import si.francebevk.db.udt.records.TimeSlotRecord;


/**
 * Contains activities children can participate in
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Activity extends TableImpl<ActivityRecord> {

    private static final long serialVersionUID = 272278144;

    /**
     * The reference instance of <code>public.activity</code>
     */
    public static final Activity ACTIVITY = new Activity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivityRecord> getRecordType() {
        return ActivityRecord.class;
    }

    /**
     * The column <code>public.activity.id</code>.
     */
    public final TableField<ActivityRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('activity_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.activity.name</code>. Name of this activity
     */
    public final TableField<ActivityRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "Name of this activity");

    /**
     * The column <code>public.activity.description</code>. The longer description of this activity
     */
    public final TableField<ActivityRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "The longer description of this activity");

    /**
     * The column <code>public.activity.leader</code>. Name of the person leading this activity
     */
    public final TableField<ActivityRecord, String> LEADER = createField("leader", org.jooq.impl.SQLDataType.CLOB, this, "Name of the person leading this activity");

    /**
     * The column <code>public.activity.available_to_years</code>. All the student class years this activity is available to
     */
    public final TableField<ActivityRecord, Short[]> AVAILABLE_TO_YEARS = createField("available_to_years", org.jooq.impl.SQLDataType.SMALLINT.getArrayDataType(), this, "All the student class years this activity is available to");

    /**
     * The column <code>public.activity.slots</code>. The times during which this activity takes place
     */
    public final TableField<ActivityRecord, TimeSlotRecord[]> SLOTS = createField("slots", si.francebevk.db.udt.TimeSlot.TIME_SLOT.getDataType().getArrayDataType(), this, "The times during which this activity takes place");

    /**
     * The column <code>public.activity.cost</code>. A textual description of the cost for this activity
     */
    public final TableField<ActivityRecord, String> COST = createField("cost", org.jooq.impl.SQLDataType.CLOB, this, "A textual description of the cost for this activity");

    /**
     * The column <code>public.activity.max_pupils</code>. Maximum number of pupils for this activity
     */
    public final TableField<ActivityRecord, Short> MAX_PUPILS = createField("max_pupils", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "Maximum number of pupils for this activity");

    /**
     * Create a <code>public.activity</code> table reference
     */
    public Activity() {
        this(DSL.name("activity"), null);
    }

    /**
     * Create an aliased <code>public.activity</code> table reference
     */
    public Activity(String alias) {
        this(DSL.name(alias), ACTIVITY);
    }

    /**
     * Create an aliased <code>public.activity</code> table reference
     */
    public Activity(Name alias) {
        this(alias, ACTIVITY);
    }

    private Activity(Name alias, Table<ActivityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Activity(Name alias, Table<ActivityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Contains activities children can participate in");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ActivityRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACTIVITY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ActivityRecord> getPrimaryKey() {
        return Keys.ACTIVITY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ActivityRecord>> getKeys() {
        return Arrays.<UniqueKey<ActivityRecord>>asList(Keys.ACTIVITY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Activity as(String alias) {
        return new Activity(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Activity as(Name alias) {
        return new Activity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Activity rename(String name) {
        return new Activity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Activity rename(Name name) {
        return new Activity(name, null);
    }
}
