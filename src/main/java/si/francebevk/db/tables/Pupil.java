/*
 * This file is generated by jOOQ.
*/
package si.francebevk.db.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import si.francebevk.db.Keys;
import si.francebevk.db.Public;
import si.francebevk.db.tables.records.PupilRecord;


/**
 * Contains a single pupil
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pupil extends TableImpl<PupilRecord> {

    private static final long serialVersionUID = -661709909;

    /**
     * The reference instance of <code>public.pupil</code>
     */
    public static final Pupil PUPIL = new Pupil();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PupilRecord> getRecordType() {
        return PupilRecord.class;
    }

    /**
     * The column <code>public.pupil.id</code>. The pupil's unique ID
     */
    public final TableField<PupilRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('pupil_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "The pupil's unique ID");

    /**
     * The column <code>public.pupil.name</code>. The pupil's name
     */
    public final TableField<PupilRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "The pupil's name");

    /**
     * The column <code>public.pupil.pupil_group</code>. The pupil's class
     */
    public final TableField<PupilRecord, String> PUPIL_GROUP = createField("pupil_group", org.jooq.impl.SQLDataType.VARCHAR(2).nullable(false), this, "The pupil's class");

    /**
     * The column <code>public.pupil.access_code</code>. The pupil's access code required to access their profile
     */
    public final TableField<PupilRecord, String> ACCESS_CODE = createField("access_code", org.jooq.impl.SQLDataType.CLOB, this, "The pupil's access code required to access their profile");

    /**
     * The column <code>public.pupil.extended_stay</code>. Indicates choice for pupil's inclusion in extended stay
     */
    public final TableField<PupilRecord, Boolean> EXTENDED_STAY = createField("extended_stay", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "Indicates choice for pupil's inclusion in extended stay");

    /**
     * The column <code>public.pupil.leave_mon</code>. Indicates the minutes of day at which pupil will leave school on monday (null means student is not participating on that day)
     */
    public final TableField<PupilRecord, Short> LEAVE_MON = createField("leave_mon", org.jooq.impl.SQLDataType.SMALLINT, this, "Indicates the minutes of day at which pupil will leave school on monday (null means student is not participating on that day)");

    /**
     * The column <code>public.pupil.leave_tue</code>. Indicates the minutes of day at which pupil will leave school on tuesday (null means student is not participating on that day)
     */
    public final TableField<PupilRecord, Short> LEAVE_TUE = createField("leave_tue", org.jooq.impl.SQLDataType.SMALLINT, this, "Indicates the minutes of day at which pupil will leave school on tuesday (null means student is not participating on that day)");

    /**
     * The column <code>public.pupil.leave_wed</code>. Indicates the minutes of day at which pupil will leave school on wednesday (null means student is not participating on that day)
     */
    public final TableField<PupilRecord, Short> LEAVE_WED = createField("leave_wed", org.jooq.impl.SQLDataType.SMALLINT, this, "Indicates the minutes of day at which pupil will leave school on wednesday (null means student is not participating on that day)");

    /**
     * The column <code>public.pupil.leave_thu</code>. Indicates the minutes of day at which pupil will leave school on thursday (null means student is not participating on that day)
     */
    public final TableField<PupilRecord, Short> LEAVE_THU = createField("leave_thu", org.jooq.impl.SQLDataType.SMALLINT, this, "Indicates the minutes of day at which pupil will leave school on thursday (null means student is not participating on that day)");

    /**
     * The column <code>public.pupil.leave_fri</code>. Indicates the minutes of day at which pupil will leave school on friday (null means student is not participating on that day)
     */
    public final TableField<PupilRecord, Short> LEAVE_FRI = createField("leave_fri", org.jooq.impl.SQLDataType.SMALLINT, this, "Indicates the minutes of day at which pupil will leave school on friday (null means student is not participating on that day)");

    /**
     * The column <code>public.pupil.email</code>. The contact email via which the pupil may be contacted
     */
    public final TableField<PupilRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.CLOB, this, "The contact email via which the pupil may be contacted");

    /**
     * The column <code>public.pupil.last_login</code>.
     */
    public final TableField<PupilRecord, OffsetDateTime> LAST_LOGIN = createField("last_login", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * Create a <code>public.pupil</code> table reference
     */
    public Pupil() {
        this(DSL.name("pupil"), null);
    }

    /**
     * Create an aliased <code>public.pupil</code> table reference
     */
    public Pupil(String alias) {
        this(DSL.name(alias), PUPIL);
    }

    /**
     * Create an aliased <code>public.pupil</code> table reference
     */
    public Pupil(Name alias) {
        this(alias, PUPIL);
    }

    private Pupil(Name alias, Table<PupilRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pupil(Name alias, Table<PupilRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Contains a single pupil");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PupilRecord, Long> getIdentity() {
        return Keys.IDENTITY_PUPIL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PupilRecord> getPrimaryKey() {
        return Keys.PUPIL_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PupilRecord>> getKeys() {
        return Arrays.<UniqueKey<PupilRecord>>asList(Keys.PUPIL_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PupilRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PupilRecord, ?>>asList(Keys.PUPIL__PUPIL_PUPIL_GROUP_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Pupil as(String alias) {
        return new Pupil(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Pupil as(Name alias) {
        return new Pupil(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pupil rename(String name) {
        return new Pupil(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pupil rename(Name name) {
        return new Pupil(name, null);
    }
}
