/*
 * This file is generated by jOOQ.
*/
package si.francebevk.db.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import si.francebevk.db.Keys;
import si.francebevk.db.Public;
import si.francebevk.db.enums.ActivityLogType;
import si.francebevk.db.tables.records.ActivityLogRecord;


/**
 * Records the activity related to a pupil
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActivityLog extends TableImpl<ActivityLogRecord> {

    private static final long serialVersionUID = -1865564123;

    /**
     * The reference instance of <code>public.activity_log</code>
     */
    public static final ActivityLog ACTIVITY_LOG = new ActivityLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivityLogRecord> getRecordType() {
        return ActivityLogRecord.class;
    }

    /**
     * The column <code>public.activity_log.id</code>.
     */
    public final TableField<ActivityLogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('activity_log_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.activity_log.pupil_id</code>. ID of the pupil to whom this log entry applies
     */
    public final TableField<ActivityLogRecord, Long> PUPIL_ID = createField("pupil_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "ID of the pupil to whom this log entry applies");

    /**
     * The column <code>public.activity_log.time</code>. The time at which the event happened
     */
    public final TableField<ActivityLogRecord, OffsetDateTime> TIME = createField("time", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "The time at which the event happened");

    /**
     * The column <code>public.activity_log.admin_user</code>. True when the action was performed by an admin user, not the parent
     */
    public final TableField<ActivityLogRecord, Boolean> ADMIN_USER = createField("admin_user", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "True when the action was performed by an admin user, not the parent");

    /**
     * The column <code>public.activity_log.type</code>. What actually happened?
     */
    public final TableField<ActivityLogRecord, ActivityLogType> TYPE = createField("type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(si.francebevk.db.enums.ActivityLogType.class), this, "What actually happened?");

    /**
     * The column <code>public.activity_log.details</code>. A description of the event that we can display when reconstructing events
     */
    public final TableField<ActivityLogRecord, String> DETAILS = createField("details", org.jooq.impl.SQLDataType.CLOB, this, "A description of the event that we can display when reconstructing events");

    /**
     * Create a <code>public.activity_log</code> table reference
     */
    public ActivityLog() {
        this(DSL.name("activity_log"), null);
    }

    /**
     * Create an aliased <code>public.activity_log</code> table reference
     */
    public ActivityLog(String alias) {
        this(DSL.name(alias), ACTIVITY_LOG);
    }

    /**
     * Create an aliased <code>public.activity_log</code> table reference
     */
    public ActivityLog(Name alias) {
        this(alias, ACTIVITY_LOG);
    }

    private ActivityLog(Name alias, Table<ActivityLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActivityLog(Name alias, Table<ActivityLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Records the activity related to a pupil");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ActivityLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACTIVITY_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ActivityLogRecord> getPrimaryKey() {
        return Keys.ACTIVITY_LOG_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ActivityLogRecord>> getKeys() {
        return Arrays.<UniqueKey<ActivityLogRecord>>asList(Keys.ACTIVITY_LOG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ActivityLogRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ActivityLogRecord, ?>>asList(Keys.ACTIVITY_LOG__ACTIVITY_LOG_PUPIL_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ActivityLog as(String alias) {
        return new ActivityLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ActivityLog as(Name alias) {
        return new ActivityLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActivityLog rename(String name) {
        return new ActivityLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActivityLog rename(Name name) {
        return new ActivityLog(name, null);
    }
}
