/*
 * This file is generated by jOOQ.
*/
package si.francebevk.db.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import si.francebevk.db.Keys;
import si.francebevk.db.Public;
import si.francebevk.db.tables.records.ErrorLogRecord;


/**
 * Contains errors that may have happened during the process
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ErrorLog extends TableImpl<ErrorLogRecord> {

    private static final long serialVersionUID = -1181264696;

    /**
     * The reference instance of <code>public.error_log</code>
     */
    public static final ErrorLog ERROR_LOG = new ErrorLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ErrorLogRecord> getRecordType() {
        return ErrorLogRecord.class;
    }

    /**
     * The column <code>public.error_log.id</code>.
     */
    public final TableField<ErrorLogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('error_log_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.error_log.pupil_id</code>. Id of the pupil to which the error happened
     */
    public final TableField<ErrorLogRecord, Long> PUPIL_ID = createField("pupil_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Id of the pupil to which the error happened");

    /**
     * The column <code>public.error_log.created_on</code>. The timestamp on which the error happened
     */
    public final TableField<ErrorLogRecord, OffsetDateTime> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "The timestamp on which the error happened");

    /**
     * The column <code>public.error_log.message</code>. The error message
     */
    public final TableField<ErrorLogRecord, String> MESSAGE = createField("message", org.jooq.impl.SQLDataType.CLOB, this, "The error message");

    /**
     * Create a <code>public.error_log</code> table reference
     */
    public ErrorLog() {
        this(DSL.name("error_log"), null);
    }

    /**
     * Create an aliased <code>public.error_log</code> table reference
     */
    public ErrorLog(String alias) {
        this(DSL.name(alias), ERROR_LOG);
    }

    /**
     * Create an aliased <code>public.error_log</code> table reference
     */
    public ErrorLog(Name alias) {
        this(alias, ERROR_LOG);
    }

    private ErrorLog(Name alias, Table<ErrorLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private ErrorLog(Name alias, Table<ErrorLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Contains errors that may have happened during the process");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ErrorLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_ERROR_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ErrorLogRecord> getPrimaryKey() {
        return Keys.ERROR_LOG_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ErrorLogRecord>> getKeys() {
        return Arrays.<UniqueKey<ErrorLogRecord>>asList(Keys.ERROR_LOG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ErrorLogRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ErrorLogRecord, ?>>asList(Keys.ERROR_LOG__ERROR_LOG_PUPIL_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ErrorLog as(String alias) {
        return new ErrorLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ErrorLog as(Name alias) {
        return new ErrorLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ErrorLog rename(String name) {
        return new ErrorLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ErrorLog rename(Name name) {
        return new ErrorLog(name, null);
    }
}
