/*
 * This file is generated by jOOQ.
*/
package si.francebevk.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import si.francebevk.db.Keys;
import si.francebevk.db.Public;
import si.francebevk.db.enums.AuthorizedPersonType;
import si.francebevk.db.tables.records.AuthorizedCompanionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorizedCompanion extends TableImpl<AuthorizedCompanionRecord> {

    private static final long serialVersionUID = -805575991;

    /**
     * The reference instance of <code>public.authorized_companion</code>
     */
    public static final AuthorizedCompanion AUTHORIZED_COMPANION = new AuthorizedCompanion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthorizedCompanionRecord> getRecordType() {
        return AuthorizedCompanionRecord.class;
    }

    /**
     * The column <code>public.authorized_companion.id</code>.
     */
    public final TableField<AuthorizedCompanionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('authorized_companion_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.authorized_companion.pupil_id</code>. Reference to the pupil whom these persons will pick up
     */
    public final TableField<AuthorizedCompanionRecord, Long> PUPIL_ID = createField("pupil_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Reference to the pupil whom these persons will pick up");

    /**
     * The column <code>public.authorized_companion.name</code>. Name of the person who will pick up the pupil
     */
    public final TableField<AuthorizedCompanionRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "Name of the person who will pick up the pupil");

    /**
     * The column <code>public.authorized_companion.type</code>. The family tie to the pupil
     */
    public final TableField<AuthorizedCompanionRecord, AuthorizedPersonType> TYPE = createField("type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(si.francebevk.db.enums.AuthorizedPersonType.class), this, "The family tie to the pupil");

    /**
     * Create a <code>public.authorized_companion</code> table reference
     */
    public AuthorizedCompanion() {
        this(DSL.name("authorized_companion"), null);
    }

    /**
     * Create an aliased <code>public.authorized_companion</code> table reference
     */
    public AuthorizedCompanion(String alias) {
        this(DSL.name(alias), AUTHORIZED_COMPANION);
    }

    /**
     * Create an aliased <code>public.authorized_companion</code> table reference
     */
    public AuthorizedCompanion(Name alias) {
        this(alias, AUTHORIZED_COMPANION);
    }

    private AuthorizedCompanion(Name alias, Table<AuthorizedCompanionRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthorizedCompanion(Name alias, Table<AuthorizedCompanionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AuthorizedCompanionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_AUTHORIZED_COMPANION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AuthorizedCompanionRecord> getPrimaryKey() {
        return Keys.AUTHORIZED_COMPANION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AuthorizedCompanionRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthorizedCompanionRecord>>asList(Keys.AUTHORIZED_COMPANION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AuthorizedCompanionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AuthorizedCompanionRecord, ?>>asList(Keys.AUTHORIZED_COMPANION__AUTHORIZED_COMPANION_PUPIL_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorizedCompanion as(String alias) {
        return new AuthorizedCompanion(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorizedCompanion as(Name alias) {
        return new AuthorizedCompanion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthorizedCompanion rename(String name) {
        return new AuthorizedCompanion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthorizedCompanion rename(Name name) {
        return new AuthorizedCompanion(name, null);
    }
}
